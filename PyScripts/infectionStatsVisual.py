#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Takes the file created by the script infectionStatsMutli.py and creates nice
plots showing the averaged results of the simulations.

Created on Sat Nov  4 01:42:29 2017

@author: Piotr Bentkowski :: bentkowski.piotr@gmail.com
"""
import re
import sys
import numpy as np
import matplotlib.pyplot as plt
import infectionStatsBig as isb


def loadDataFromDataFile(FILE):
    """Takes the file generated by the infectionStatsMulti.py and loads it to
    a convenient data structure. The file is named something like that:
    immuno_1500_750_30.dat"""
    dataList = []
    with open(FILE) as infile:
        for line in infile:
            if re.search("#", line):
                continue
            else:
                one = line.split(',')
                ww = re.split(";", one[4])
                dataList.append((float(one[0]), float(one[1]), float(one[2]),
                                 float(one[3]),
                                 np.array(ww[0:-1], dtype=float)))
    return dataList


def getListOfParamsSets(dataList):
    """Takes the data structure created by loadDataFromDataFile() and extract
    the informations on what parameters are used."""
    allParamsTupl = []
    for itm in dataList:
        tupparamz = (itm[0], itm[1])
        if tupparamz not in allParamsTupl:
            allParamsTupl.append(tupparamz)
    return allParamsTupl


def plotOneSet(dataList, paramsTupl, maxxy=(100, 1e5), figNum=1):
    """Makes a simple plot of all simulation results for selected set of
    parameters."""
    ii = 0
    fs = 16
    tkfs = 14
    plt.figure(figNum, figsize=(18, 8))
    plt.subplot(121)
    persist = []
    for itm in dataList:
        tupparamz = (itm[0], itm[1])
        if tupparamz == paramsTupl:
            persist.append(itm[3]/itm[2])
            plt.semilogy(itm[4] + 1.)
            ii += 1
    persist = np.array(persist)
    print("We have", ii, "simulations for", paramsTupl)
    plt.xlim((0, maxxy[0]))
    plt.ylim((0, maxxy[1]))
    plt.xlabel("time [host generations after mutation apperence]", fontsize=fs)
    plt.ylabel("mutant’s relative immunocompetence, $log(y + 1)$ ",
               fontsize=fs)
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.grid(True)
    plt.subplot(122)
    plt.boxplot(persist)
    plt.ylim((0, 1.0))
    plt.show()


def getAvgVals(dataList, allParamsTupl, avgWay='median'):
    """Creates and averaged dataset for further visualisation."""
    avgDataList = []
    for prm in allParamsTupl:
        oneGoSimuls = []
        persist = []
        immDomOne = []
        for itm in dataList:
            tupparamz = (itm[0], itm[1])
            if tupparamz == prm:
                persist.append(itm[3]/itm[2])
                immDomOne.append(itm[4][0])
                oneGoSimuls.append(itm[4])
        meanStats = isb.calcAverageForOneRun(oneGoSimuls, avgWay)
        avgDataList.append((prm[0], prm[1], meanStats, np.array(persist),
                            np.array(immDomOne)))
    return sorted(avgDataList, key=lambda elm: (elm[0], elm[1]))


def plotAvgLog(avgDataList, maxxy=(100, 1e5), plottName='imm_compt_fig.png'):
    """Plots the summary results. Makes it to look nice."""
    ii = 0
    fs = 16
    tkfs = 14
    boxLineWth = 1.5
    boxMedLine = 3.0
    linez = ('b-', 'b--', 'r-', 'r--')
    forBoxPltRecruit = []
    forBoxPltImmume = []
    boxLbls = []
    plt.figure(1, figsize=(14, 10))
    plt.subplot(212)
    for itm in avgDataList:
        plt.semilogy(itm[2] + 1., linez[ii], lw=2)
        print("line", linez[ii], "represents", itm[0], ",", itm[1])
        forBoxPltRecruit.append(itm[3])
        forBoxPltImmume.append(itm[4])
        boxLbls.append("alpha %1.2f\npath. spp %d" % (itm[0], itm[1]))
        ii += 1
    plt.hlines(2., 0, maxxy[0], colors='k', linestyles='dashed')
    plt.xlabel("time [host generations after mutation apperence]", fontsize=fs)
    plt.ylabel("mutant’s relative               \nimmuno-competence"
               + "  $log(y + 1)$", fontsize=fs)
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.xlim((0, maxxy[0]))
    plt.ylim((0, maxxy[1]))
    plt.grid(True)
    plt.subplot(221)
    boxprops = dict(linestyle='-', linewidth=boxLineWth, color='k')
    # color the median line
    medianprops = []
    medianprops.append(dict(linestyle='-', linewidth=boxMedLine, color='b'))
    medianprops.append(dict(linestyle='--', linewidth=boxMedLine, color='b'))
    medianprops.append(dict(linestyle='-', linewidth=boxMedLine, color='r'))
    medianprops.append(dict(linestyle='--', linewidth=boxMedLine, color='r'))
    # end color the median line
    whiskerprops = dict(linewidth=boxLineWth)
    capprops = dict(linewidth=boxLineWth)
    flierprops = dict(markersize=10)
    mockList = []
    for jj in range(len(forBoxPltRecruit)):
        mockList.append([])
    typesOfmedLines = len(medianprops)
    for i, dat in enumerate(forBoxPltRecruit):
        mockList[i] = dat
        indx = i % typesOfmedLines
        plt.boxplot(mockList, labels=boxLbls, boxprops=boxprops,
                    medianprops=medianprops[indx], whiskerprops=whiskerprops,
                    capprops=capprops,  flierprops=flierprops)
        mockList[i] = []
    plt.ylim((0.0, 1))
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.ylabel("recruitmeent probability", fontsize=fs)
    plt.grid(axis='y')
    plt.subplot(222)
    mockList = []
    for jj in range(len(forBoxPltImmume)):
        mockList.append([])
    typesOfmedLines = len(medianprops)
    for i, dat in enumerate(forBoxPltImmume):
        mockList[i] = dat
        indx = i % typesOfmedLines
        plt.boxplot(mockList, labels=boxLbls, boxprops=boxprops,
                    medianprops=medianprops[indx], whiskerprops=whiskerprops,
                    capprops=capprops,  flierprops=flierprops)
        plt.yscale('log')
        mockList[i] = []
    plt.ylim((1, 1e4))
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.ylabel("mutant’s relative immuno-\ncompetence at the first generation",
               fontsize=fs)
    plt.grid(axis='y')
    plt.tight_layout()
    plt.savefig(plottName, dpi=150)
    plt.show()


def plotAvgLinn(avgDataList, maxxy=(100, 1e5), plottName='imm_compt_fig.png'):
    """Plots the summary results. Makes it to look nice."""
    ii = 0
    fs = 16
    tkfs = 14
    boxLineWth = 1.5
    boxMedLine = 3.0
    linez = ('b-', 'b--', 'r-', 'r--')
    forBoxPltRecruit = []
    forBoxPltImmume = []
    boxLbls = []
    plt.figure(1, figsize=(14, 10))
    plt.subplot(212)
    for itm in avgDataList:
        plt.plot(itm[2] + 1., linez[ii], lw=2)
        print("line", linez[ii], "represents", itm[0], ",", itm[1])
        forBoxPltRecruit.append(itm[3])
        forBoxPltImmume.append(itm[4])
        boxLbls.append("alpha %1.2f\npath. spp %d" % (itm[0], itm[1]))
        ii += 1
    plt.hlines(1., 0, maxxy[0], colors='k', linestyles='dashed')
    plt.xlabel("time [host generations after mutation apperence]", fontsize=fs)
    plt.ylabel("mutant’s relative immuno-competence", fontsize=fs)
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.xlim((0, maxxy[0]))
    plt.ylim((0, maxxy[1]))
    plt.grid(True)
    plt.subplot(221)
    boxprops = dict(linestyle='-', linewidth=boxLineWth, color='k')
    # color the median line
    medianprops = []
    medianprops.append(dict(linestyle='-', linewidth=boxMedLine, color='b'))
    medianprops.append(dict(linestyle='--', linewidth=boxMedLine, color='b'))
    medianprops.append(dict(linestyle='-', linewidth=boxMedLine, color='r'))
    medianprops.append(dict(linestyle='--', linewidth=boxMedLine, color='r'))
    # end color the median line
    whiskerprops = dict(linewidth=boxLineWth)
    capprops = dict(linewidth=boxLineWth)
    flierprops = dict(markersize=10)
    mockList = []
    for jj in range(len(forBoxPltRecruit)):
        mockList.append([])
    typesOfmedLines = len(medianprops)
    for i, dat in enumerate(forBoxPltRecruit):
        mockList[i] = dat
        indx = i % typesOfmedLines
        plt.boxplot(mockList, labels=boxLbls, boxprops=boxprops,
                    medianprops=medianprops[indx], whiskerprops=whiskerprops,
                    capprops=capprops,  flierprops=flierprops)
        mockList[i] = []
    plt.ylim((0.0, 1))
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.ylabel("recruitmeent probability", fontsize=fs)
    plt.grid(axis='y')
    plt.subplot(222)
    mockList = []
    for jj in range(len(forBoxPltImmume)):
        mockList.append([])
    typesOfmedLines = len(medianprops)
    for i, dat in enumerate(forBoxPltImmume):
        mockList[i] = dat
        indx = i % typesOfmedLines
        plt.boxplot(mockList, labels=boxLbls, boxprops=boxprops,
                    medianprops=medianprops[indx], whiskerprops=whiskerprops,
                    capprops=capprops,  flierprops=flierprops)
        mockList[i] = []
    plt.ylim((0.0, 5000))
    plt.xticks(fontsize=tkfs)
    plt.yticks(fontsize=tkfs)
    plt.ylabel("mutant’s relative immuno-\ncompetence at the first generation",
               fontsize=fs)
    plt.grid(axis='y')
    plt.tight_layout()
    plt.savefig(plottName, dpi=150)
    plt.show()


def argInfo():
    print("Three arguments are needed:")
    print("  1. Name of the file with data.")
    print("  2. Name of the figure.")
    print("  3. Y-axis scale 'log' or 'lin'")


def main():
    """Main function - the script's main body."""
    xMax = 30
    yMax = 10000
    if len(sys.argv) <= 3:
        argInfo()
        sys.exit()
    try:
        dataList = loadDataFromDataFile(sys.argv[1])
    except Exception:
        print("Cannot load the file with data. Check the name or if it exists")
        sys.exit()
    paramzv = getListOfParamsSets(dataList)
    avgDataList = getAvgVals(dataList, paramzv, 'mean')
    try:
        if sys.argv[3] == 'lin':
            plotAvgLinn(avgDataList, (xMax, yMax), sys.argv[2])
        elif sys.argv[3] == 'log':
            plotAvgLog(avgDataList, (xMax, yMax), sys.argv[2])
        else:
            print("Wrong Y-axis scaling. Hast to be 'log' or 'lin', pick one.")
            sys.exit()
        print("DONE! Check the plot:", sys.argv[2])
    except Exception:
        print("Cannot create the plot. Check if the file format is OK")
        sys.exit()


if __name__ == "__main__":
    main()
